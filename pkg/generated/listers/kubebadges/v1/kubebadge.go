/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/kubebadges/kubebadges/pkg/apis/kubebadges/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KubeBadgeLister helps list KubeBadges.
// All objects returned here must be treated as read-only.
type KubeBadgeLister interface {
	// List lists all KubeBadges in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.KubeBadge, err error)
	// KubeBadges returns an object that can list and get KubeBadges.
	KubeBadges(namespace string) KubeBadgeNamespaceLister
	KubeBadgeListerExpansion
}

// kubeBadgeLister implements the KubeBadgeLister interface.
type kubeBadgeLister struct {
	indexer cache.Indexer
}

// NewKubeBadgeLister returns a new KubeBadgeLister.
func NewKubeBadgeLister(indexer cache.Indexer) KubeBadgeLister {
	return &kubeBadgeLister{indexer: indexer}
}

// List lists all KubeBadges in the indexer.
func (s *kubeBadgeLister) List(selector labels.Selector) (ret []*v1.KubeBadge, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.KubeBadge))
	})
	return ret, err
}

// KubeBadges returns an object that can list and get KubeBadges.
func (s *kubeBadgeLister) KubeBadges(namespace string) KubeBadgeNamespaceLister {
	return kubeBadgeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KubeBadgeNamespaceLister helps list and get KubeBadges.
// All objects returned here must be treated as read-only.
type KubeBadgeNamespaceLister interface {
	// List lists all KubeBadges in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.KubeBadge, err error)
	// Get retrieves the KubeBadge from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.KubeBadge, error)
	KubeBadgeNamespaceListerExpansion
}

// kubeBadgeNamespaceLister implements the KubeBadgeNamespaceLister
// interface.
type kubeBadgeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KubeBadges in the indexer for a given namespace.
func (s kubeBadgeNamespaceLister) List(selector labels.Selector) (ret []*v1.KubeBadge, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.KubeBadge))
	})
	return ret, err
}

// Get retrieves the KubeBadge from the indexer for a given namespace and name.
func (s kubeBadgeNamespaceLister) Get(name string) (*v1.KubeBadge, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("kubebadge"), name)
	}
	return obj.(*v1.KubeBadge), nil
}
